@model IEnumerable<TheatreCMS3.Areas.Rent.Models.RentalRequest>

@{
    ViewBag.Title = "Index";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<h2>Index</h2>

<p>
    @Html.ActionLink("Create New", "Create")
</p>

<div id="RentalRequest-Index--buttonDiv">
    <button id="RentalRequest-Index--button" onclick="toggleRentals()">Expired Rentals</button>
</div>

@{ var expired = Model.Where(i => ((i.EndTime.AddDays(7)) <= (DateTime.Now))); }

<div id="RentalRequest-Index--currentDiv">
    <h3>Current Rentals</h3><br />
    @foreach (var item in Model.Where(i => ((i.EndTime.AddDays(7)) > (DateTime.Now))).OrderBy(i => i.StartTime))
    {
    <button class="RentalRequest-Index--accordion">

        <div class="RentalRequest-Index--container1">
            <div class="RentalRequest-Index--accordionDiv1">
                @Html.DisplayFor(modelItem => item.Company)<br />
                @Html.DisplayFor(modelItem => item.ContactPerson)
            </div>

            <!--Using .Ticks to properly convert to DateTime-->
            @{
                DateTime startTime = new DateTime(item.StartTime.Ticks);
                var timeUntilStart = startTime - DateTime.Now;

                DateTime endTime = new DateTime(item.EndTime.Ticks);
                var timeRemaining = endTime - DateTime.Now;
            }

            <!--Using if/else statements to ensure no negative values are shown, and only display relevant information-->
            <div class="RentalRequest-Index--accordionDiv2">

                @if (timeUntilStart >= TimeSpan.Zero)
                {
                <p>Time Until Start: @timeUntilStart.Days Days, @timeUntilStart.Hours Hours, @timeUntilStart.Minutes Minutes</p>
                }
                else
                {
                <p>Time Until Start: N/A</p>
                }

                @if (timeRemaining >= TimeSpan.Zero && timeUntilStart >= TimeSpan.Zero)
                {
                <p>Time Remaining: N/A</p>
                }
                else if (timeRemaining >= TimeSpan.Zero && timeUntilStart < TimeSpan.Zero)
                {
                <p>Time Remaining: @timeRemaining.Days Days, @timeRemaining.Hours Hours, @timeRemaining.Minutes Minutes</p>
                }
                else
                {
                <p>Time Remaining: None!</p>
                }

            </div>
        </div>

    </button>

    <div class="RentalRequest-Index--panel">

        <div class="RentalRequest-Index--container2">

            <div class="RentalRequest-Index--startDiv">
                <p>Start Time:<br /> @Html.DisplayFor(modelItem => item.StartTime)</p>
            </div>

            <div class="RentalRequest-Index--endDiv">
                <p>End Time:<br /> @Html.DisplayFor(modelItem => item.EndTime)</p>
            </div>

        </div>

        <div class="RentalRequest-Index--infoDiv">
            <p>Rental Code: @Html.DisplayFor(modelItem => item.RentalCode)</p>
            <p>Project Info: @Html.DisplayFor(modelItem => item.ProjectInfo)</p>
            <p>Accepted? @Html.DisplayFor(modelItem => item.Accepted)</p>
            <p>Contract Signed? @Html.DisplayFor(modelItem => item.ContractSigned)</p>

            @Html.ActionLink("Edit", "Edit", new { id = item.RentalRequestID }) |
            @Html.ActionLink("Details", "Details", new { id = item.RentalRequestID }) |
            @Html.ActionLink("Delete", "Delete", new { id = item.RentalRequestID })
        </div>

    </div>
    }
</div>

<div id="RentalRequest-Index--expiredDiv">
    <h3>Expired Rentals</h3><br />
    @foreach (var item in expired.OrderByDescending(x => x.EndTime))
    {
    <button class="RentalRequest-Index--accordion">

        <div class="RentalRequest-Index--container1">
            <div class="RentalRequest-Index--accordionDiv1">
                @Html.DisplayFor(modelItem => item.Company)<br />
                @Html.DisplayFor(modelItem => item.ContactPerson)
            </div>

            <!--Using .Ticks to properly convert to DateTime-->
            @{
                    DateTime startTime = new DateTime(item.StartTime.Ticks);
                    var timeUntilStart = startTime - DateTime.Now;

                    DateTime endTime = new DateTime(item.EndTime.Ticks);
                    var timeRemaining = endTime - DateTime.Now;
            }

            <!--Using if/else statements to ensure no negative values are shown, and only display relevant information-->
            <div class="RentalRequest-Index--accordionDiv2">

                @if (timeUntilStart >= TimeSpan.Zero)
                    {
                <p>Time Until Start: @timeUntilStart.Days Days, @timeUntilStart.Hours Hours, @timeUntilStart.Minutes Minutes</p>
                    }
                    else
                    {
                <p>Time Until Start: N/A</p>
                    }

                @if (timeRemaining >= TimeSpan.Zero && timeUntilStart >= TimeSpan.Zero)
                    {
                <p>Time Remaining: N/A</p>
                    }
                    else if (timeRemaining >= TimeSpan.Zero && timeUntilStart < TimeSpan.Zero)
                    {
                <p>Time Remaining: @timeRemaining.Days Days, @timeRemaining.Hours Hours, @timeRemaining.Minutes Minutes</p>
                    }
                    else
                    {
                <p>Time Remaining: None!</p>
                    }

            </div>
        </div>

    </button>

    <div class="RentalRequest-Index--panel">

        <div class="RentalRequest-Index--container2">

            <div class="RentalRequest-Index--startDiv">
                <p>Start Time:<br /> @Html.DisplayFor(modelItem => item.StartTime)</p>
            </div>

            <div class="RentalRequest-Index--endDiv">
                <p>End Time:<br /> @Html.DisplayFor(modelItem => item.EndTime)</p>
            </div>

        </div>

        <div class="RentalRequest-Index--infoDiv">
            <p>Rental Code: @Html.DisplayFor(modelItem => item.RentalCode)</p>
            <p>Project Info: @Html.DisplayFor(modelItem => item.ProjectInfo)</p>
            <p>Accepted? @Html.DisplayFor(modelItem => item.Accepted)</p>
            <p>Contract Signed? @Html.DisplayFor(modelItem => item.ContractSigned)</p>

            @Html.ActionLink("Edit", "Edit", new { id = item.RentalRequestID }) |
            @Html.ActionLink("Details", "Details", new { id = item.RentalRequestID }) |
            @Html.ActionLink("Delete", "Delete", new { id = item.RentalRequestID })
        </div>

    </div>
    }
</div>


