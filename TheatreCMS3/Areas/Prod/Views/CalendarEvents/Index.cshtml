@model IEnumerable<TheatreCMS3.Areas.Prod.Models.CalendarEvent>

@{
  ViewBag.Title = "Calendar Events";
  Layout = "~/Views/Shared/_Layout.cshtml";
}

<script type="text/javascript">
  document.addEventListener('DOMContentLoaded', evt => {
    document.querySelectorAll("[data-toggle=\"popover\"]")
      .forEach(elem => new bootstrap.Popover(elem));
  });
</script>

<div class="CalendarEvents-Create--form CalendarEvents-Index--EventListings">
  <br />
  <div class="form-group">
    <h2 class="cms-text-main-light col-md-12" style="padding: 0;">Event</h2>
    <p class="col-md-12" style="padding: 0;">
      Don't see an event?
      <br />
      <a href="@Url.Action("Create")" class="btn btn-primary">Create Event</a>
    </p>
    @foreach (var e in Model) {
      <div class="card col-md-12 cms-bg-dark">
        <div class="row no-gutters">
          @{
            DateTime startTime = new DateTime(e.StartDate.Year, e.StartDate.Month, e.StartDate.Day, e.StartTime?.Hour ?? 0, e.StartTime?.Minute ?? 0, e.StartTime?.Second ?? 0);
            DateTime endTime = new DateTime(e.EndDate.Year, e.EndDate.Month, e.EndDate.Day, e.EndTime?.Hour ?? 0, e.EndTime?.Minute ?? 0, e.EndTime?.Second ?? 0);
            bool endDateOnDifferentDay = startTime.Date != endTime.Date;
            bool sameDayAndTime = !endDateOnDifferentDay && startTime.TimeOfDay == endTime.TimeOfDay;
          }
          <h5 class="card-title">
            @e.StartDate.Day
            <small class="text-muted">@e.StartDate.ToString("MMM")</small>
            @{
              TimeSpan eventDuration = endTime - startTime;
              // Show event duration estimate
              bool moreThanTwoDays = eventDuration.TotalDays >= 2;
              if (!e.AllDay && eventDuration.TotalDays >= 2) {
                /* Code that evaluated the duration in day/hour/min/sec
                double value = 0;
                string unit = "Day";
                if ((value = eventDuration.TotalDays) >= 1) { unit = "Day"; }
                else if ((value = eventDuration.TotalHours) >= 1) { unit = "Hour"; }
                else if ((value = eventDuration.TotalMinutes) >= 1) { unit = "Min"; }
                else if ((value = eventDuration.TotalSeconds) >= 1) { unit = "Sec"; }*/

                double value = Math.Round(eventDuration.TotalDays, 1);
                bool isValueWholeNumber = (value % 1) == 0;
                string s = isValueWholeNumber && value == 1 ? "" : "s";
                <small class="text-muted eventDuration" data-toggle="popover" data-trigger="hover" data-content="This is an @value day event">@($"{value} Day{s}")</small>
              }
            }
          </h5>
        <div>
          <h5 class="card-title">
            @e.Title
            @{
              double daysUntilDue = endTime.Subtract(DateTime.Now).TotalDays;
              /*if (daysUntilDue < 0)
              { <span class="badge badge-secondary">Done</span> }
              else*/
              if (1 < daysUntilDue) { <span class="badge badge-warning">@Math.Round(daysUntilDue, 0) days left!</span> }
              else if (0 < daysUntilDue) { <span class="badge badge-danger">Last Day!</span> }

              string format = endDateOnDifferentDay ? "MMMM d" : "";
              format += !e.AllDay ? " H:mm" : string.Empty;

              if (!string.IsNullOrEmpty(format)) {
                <small class="text-muted">@($"{startTime.ToString(format)}" + (sameDayAndTime ? string.Empty : $" - {endTime.ToString(format)}"))</small>
              }
            }
          </h5>
          <p class="card-text">@e.Description</p>
          <a href="@Url.Action("Edit", new { id = e.EventId })" class="card-link text-primary">Edit</a>
          <a href="@Url.Action("Details", new { id = e.EventId })" class="card-link text-primary">Details</a>
          <a href="@Url.Action("Delete", new { id = e.EventId })" class="card-link text-danger">Delete</a>
        </div>
        </div>
      </div>
    }
  </div>
</div>
